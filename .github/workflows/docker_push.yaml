name: build_and_push_docker

on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *
  push:
    branches:
      - master
  pull_request:
  release:
    types: [published]
jobs:
  yolox:
    name: build and push wamvtan/yolox
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/cleanup_runner
      - uses: ./.github/workflows/docker/yolox
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
  yolox_trainer:
    name: build and push wamvtan/yolox_trainer
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: yolox
    strategy:
      matrix:
        os: [linux-x64]
        runner_version: [2.295.0]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/cleanup_runner
      - uses: ./.github/workflows/docker/yolox_trainer
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          github_actions_runner_version: ${{ matrix.runner_version }}
          os_version: ${{ matrix.os }}
  vrx:
    name: build and push wamvtan/vrx
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/cleanup_runner
      - uses: ./.github/workflows/docker/vrx
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
  auto_logger:
    name: build and push wamvtan/auto_logger
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/cleanup_runner
      - uses: ./.github/workflows/docker/vrx
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
  # Docker Docker Pull will be difficult due to communication capacity, so this line will be uncommented for the duration of RoboBoat.
  # export_wamv_repos:
  #   name: export_wamv_repos
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 360
  #   strategy:
  #     matrix:
  #       module: ["perception", "control", "drivers", "localization", "planning"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: basic install
  #       run: |
  #           sudo apt install ansible
  #     - name: Export repos file
  #       run: ansible-playbook -i ansible/hosts/localhost.ini ansible/export_repos.yml --connection local -t ${{ matrix.module }} -t utility --become -e ansible_user=ubuntu
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: repos_file_${{ matrix.module }}
  #         path: | 
  #           ansible/packages.repos
  #           ansible/packages_exact.repos
  kicad:
    name: build and push wamvtan/kicad
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/cleanup_runner
      - uses: ./.github/workflows/docker/kicad
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
  mqtt_endpoint:
    name: build and push wamvtan/mqtt_endpoint
    strategy:
      matrix:
        platform: ["aarch64", "amd64"]
        build_os: ["ubuntu-22.04-arm", "ubuntu-22.04"]
        include:
          - platform: aarch64
            build_os: ubuntu-22.04-arm
          - platform: amd64
            build_os: ubuntu-22.04
    runs-on: ${{ matrix.build_os }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/cleanup_runner
      - uses: ./.github/workflows/docker/mqtt_endpoint
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          platform: ${{ matrix.platform }}
  # Docker Docker Pull will be difficult due to communication capacity, so this line will be uncommented for the duration of RoboBoat.
  # wamv:
  #   needs: export_wamv_repos
  #   name: build and push wamvtan/wamv
  #   runs-on: ubuntu-22.04-arm
  #   timeout-minutes: 360
  #   strategy:
  #     matrix:
  #       module: ["perception", "control", "drivers", "localization", "planning"]
  #       include:
  #         - platform: "linux/arm64/v8"
  #           base_image: docker.io/hakuturu583/cuda_ros:lt4-humble-cuda-12.2.2-devel
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/workflows/actions/cleanup_runner
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: repos_file_${{ matrix.module }}
  #         path: ./.github/workflows/docker/wamv/repos
  #     - run: ls ./.github/workflows/docker/wamv/repos
  #     - run: cat ./.github/workflows/docker/wamv/repos/packages_exact.repos
  #     - uses: ./.github/workflows/docker/wamv
  #       with:
  #         docker_username: ${{ secrets.DOCKER_USERNAME }}
  #         docker_password: ${{ secrets.DOCKER_PASSWORD }}
  #         module: ${{ matrix.module }}
  #         platform: ${{ matrix.platform }}
  #         base_image: ${{ matrix.base_image }}
