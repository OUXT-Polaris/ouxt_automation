name: scenario_test

on:
  schedule:
  - cron: 0 0 * * *
  pull_request:
  workflow_dispatch:
    inputs:
      overwrite_package:
        required: false
        default: ''
        description: 'name of the package you want to overwrite'
      commit_hash:
        required: false
        default: ''
        description: 'commit hash of overwrite package'
  push:
    branches: [ master ]

jobs:
  export_repos_full:
    name: export_repos_full
    runs-on: ubuntu-20.04
    steps:
    - name: basic install
      run: |
          sudo apt install make ansible
    - name: ansible version
      run: |
            ansible-playbook --version
    - uses: actions/checkout@v2-beta
    - name: ansible
      run: |
          ansible-playbook -i ansible/hosts/localhost.ini ansible/export_repos_full.yml --connection local --become -e ansible_user=ubuntu
    - uses: OUXT-Polaris/update-repos-action@0.0.1
      with:
        input_repos_file: ansible/packages.repos
        output_repos_file: packages.repos
        package_name: github.event.inputs.overwrite_package
        target_version: github.event.inputs.commit_hash
    - uses: actions/upload-artifact@v2
      with:
        name: packages
        path: packages.repos
  run_scenario_test:
    if: ${{ github.event_name == 'pull_request'}}
    runs-on: ubuntu-latest
    needs: export_repos_full
    outputs:
      git_branch: ${{github.head_ref}}
      image_tag: ${{ steps.findandreplace.outputs.value }}
    steps:
    - uses: actions/checkout@v2-beta
    - name: Run ros integration test action from base image
      if: ${{ github.event.label.name != 'clean_build' }}
      uses: OUXT-Polaris/ros-integration-test-action@0.0.12
      with:
        base_image: hakuturu583/robotx_scenario_test
        tag: release_build
        rosdistro: foxy
        test_command: ros2 launch navi_sim with_planner.launch.py record:=True rosbag_directory:=/artifacts/rosbag
        check_result_command: ros2 run navi_sim check_result
        artifact_name: scenario_test_result
        repos_artifact_name: packages
        repos_filename: packages.repos
        with_lcov: false
        colcon_args: --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
      env:
        ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        ACTIONS_RUNTIME_URL: ${{ env.ACTIONS_RUNTIME_URL }}
        GITHUB_RUN_ID: ${env.GITHUB_RUN_ID}
        GITHUB_CLONE_TOKEN: ${{ secrets.WAMV_TAN_BOT_SECRET }} # access token for cloning your package in private repository.
        GITHUB_CLONE_USERNAME: wam-v-tan # username of access token
    - name: Run ros integration test action from clean image
      if: ${{ github.event.label.name == 'clean_build' }}
      uses: OUXT-Polaris/ros-integration-test-action@0.0.12
      with:
        base_image: ros
        tag: foxy
        rosdistro: foxy
        test_command: ros2 launch navi_sim with_planner.launch.py record:=True rosbag_directory:=/artifacts/rosbag
        check_result_command: ros2 run navi_sim check_result
        artifact_name: scenario_test_result
        repos_artifact_name: packages
        repos_filename: packages.repos
        with_lcov: false
        colcon_args: --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
      env:
        ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        ACTIONS_RUNTIME_URL: ${{ env.ACTIONS_RUNTIME_URL }}
        GITHUB_RUN_ID: ${env.GITHUB_RUN_ID}
        GITHUB_CLONE_TOKEN: ${{ secrets.WAMV_TAN_BOT_SECRET }} # access token for cloning your package in private repository.
        GITHUB_CLONE_USERNAME: wam-v-tan # username of access token
  build_base_docker_image_with_symbol:
    if: ${{ github.event_name != 'pull_request'}}
    runs-on: ubuntu-latest
    needs: export_repos_full
    steps:
    - uses: actions/checkout@v2-beta
    - uses: actions/download-artifact@v2
      with:
        name: packages
        path: docker/scenario_test/
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        username: hakuturu583
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v2
      env:
        DOCKER_BUILDKIT: 1
      with:
        tags: hakuturu583/robotx_scenario_test:rel_with_deb_info
        context: docker/scenario_test
        build_args: BUILDKIT_INLINE_CACHE=1,
          FLAGS=--symlink-install --cmake-args --ament-cmake-args
          -DCMAKE_CXX_FLAGS=\"-fprofile-arcs -ftest-coverage -DCOVERAGE_RUN=1\"
          --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo
        push: true
        file: docker/scenario_test/Dockerfile
  build_base_docker_image:
    if: ${{ github.event_name != 'pull_request'}}
    runs-on: ubuntu-latest
    needs: export_repos_full
    steps:
    - uses: actions/checkout@v2-beta
    - uses: actions/download-artifact@v2
      with:
        name: packages
        path: docker/scenario_test/
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        username: hakuturu583
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v2
      env:
        DOCKER_BUILDKIT: 1
      with:
        tags: hakuturu583/robotx_scenario_test:release_build
        context: docker/scenario_test
        build_args: BUILDKIT_INLINE_CACHE=1,
          FLAGS=--symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
        push: true
        file: docker/scenario_test/Dockerfile