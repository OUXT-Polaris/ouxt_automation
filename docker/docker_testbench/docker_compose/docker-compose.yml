version: '3.4' # to use volumes type bind
x-volumes: &volumes
  - type: bind
    source: "${JETPACK_ROOT}/usr/include/aarch64-linux-gnu"
    target: "/usr/include/aarch64-linux-gnu"
    read_only: false
  - type: bind
    source: "${JETPACK_ROOT}/usr/lib/aarch64-linux-gnu"
    target: "/usr/lib/aarch64-linux-gnu"
    read_only: false
  - type: bind
    source: "${JETPACK_ROOT}/lib/firmware/tegra21x/nvhost_nvdec020_ns.fw"
    target: "/lib/firmware/tegra21x/nvhost_nvdec020_ns.fw"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/usr/lib/libvisionworks_sfm.so.0.90.4"
    target: "/usr/lib/libvisionworks_sfm.so.0.90.4"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/usr/lib/libvisionworks.so.1.6.0"
    target: "/usr/lib/libvisionworks.so.1.6.0"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/usr/lib/libvisionworks_tracking.so.0.88.2"
    target: "/usr/lib/libvisionworks_tracking.so.0.88.2"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/usr/lib/python3.6/dist-packages/tensorrt"
    target: "/usr/lib/python3.6/dist-packages/tensorrt"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/usr/lib/python3.6/dist-packages/graphsurgeon"
    target: "/usr/lib/python3.6/dist-packages/graphsurgeon"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/usr/lib/python3.6/dist-packages/uff"
    target: "/usr/lib/python3.6/dist-packages/uff"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/usr/src/tensorrt"
    target: "/usr/src/tensorrt"
    read_only: true
  - type: bind
    source: "${JETPACK_ROOT}/lib/firmware/tegra21x"
    target: "/lib/firmware/tegra21x"
    read_only: true

services:
  front_left_camera:
    build:
      context: .
      dockerfile: perception_camera_mock/Dockerfile
    privileged: true
    container_name: front_left_camera
    volumes: *volumes
    ports:
      - "201:22"
    networks:
      app_net:
        ipv4_address: 192.168.100.201

  front_right_camera:
    build:
      context: .
      dockerfile: perception_camera_mock/Dockerfile
    privileged: true
    container_name: front_right_camera
    volumes: *volumes
    ports:
      - "202:22"
    networks:
      app_net:
        ipv4_address: 192.168.100.202

  rear_left_camera:
    build:
      context: .
      dockerfile: perception_camera_mock/Dockerfile
    privileged: true
    container_name: rear_left_camera
    volumes: *volumes
    ports:
      - "203:22"
    networks:
      app_net:
        ipv4_address: 192.168.100.203

  rear_right_camera:
    build:
      context: .
      dockerfile: perception_camera_mock/Dockerfile
    privileged: true
    container_name: rear_right_camera
    volumes: *volumes
    ports:
      - "204:22"
    networks:
      app_net:
        ipv4_address: 192.168.100.204

  left_camera:
    build:
      context: .
      dockerfile: perception_camera_mock/Dockerfile
    privileged: true
    container_name: left_camera
    volumes: *volumes
    ports:
      - "205:22"
    networks:
      app_net:
        ipv4_address: 192.168.100.205

  right_camera:
    build:
      context: .
      dockerfile: perception_camera_mock/Dockerfile
    privileged: true
    container_name: right_camera
    volumes: *volumes
    ports:
      - "206:22"
    networks:
      app_net:
        ipv4_address: 192.168.100.206

networks:
  app_net:
    driver: bridge
    ipam:
     driver: default
     config:
       - subnet: 192.168.100.200/24